package ColumnBasedGame;

import javafx.scene.Group;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;

public class GameColumn {

	private Group column;
	private GamePiece[] pieces;
	private Rectangle[] places;
	private int columNo;
	private int fallDepth;
	private int columnWidth;
	private int rowHeight;

	public GameColumn(int columnWidth, int rowHeight, int columNo, int columnDepth, AnchorPane parent, Color stroke) {
		this.columnWidth = columnWidth;
		this.rowHeight = rowHeight;
		this.columNo = columNo;
		column = new Group();
		Rectangle r;
		places = new Rectangle[columnDepth + 1];
		pieces = new GamePiece[columnDepth + 1];
		fallDepth = columnDepth;

		int x = columNo * columnWidth+ 3 ;

		for (int c = 0; c < columnDepth; c++) {
			r = new Rectangle(x, 100 + (c * rowHeight), columnWidth, rowHeight);
			r.setFill(Color.TRANSPARENT);
			r.setStroke(stroke);
			r.setMouseTransparent(true);
			places[c] = r;
			column.getChildren().add(places[c]);
		}

		parent.getChildren().add(column);

	}

	public int getFallDepth() {
		return fallDepth;
	}

	public void pushPiece(GamePiece piece) {
		if (fallDepth > 0) {
			column.getChildren().add(piece.getCircle());
			pieces[fallDepth] = piece;
			FallService.addCircle(this, piece.getCircle());
			fallDepth--;
			ColumnGame.switchTeam();
		}
	}

	public int getX() {
		return columnWidth * columNo;
	}

	public int getColumnWidth() {
		return columnWidth;
	}

	public int getRowHeight() {
		return rowHeight;
	}

}
